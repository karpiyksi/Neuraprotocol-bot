import { ethers } from "ethers";
import fs from "fs";
import * as dotenv from "dotenv";
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
const walletsConfig = [
  {
    privateKey: process.env.PRIVATE_KEY_1,
    tokenAddress: "0x1aB357522Ed5c1a76f361520DEC1b02a3eD04014", // ETH Token
    minAmount: 1,
    maxAmount: 10,
  },
  {
    privateKey: process.env.PRIVATE_KEY_2,
    tokenAddress: "0x5e06D1bd47dd726A9bcd637e3D2F86B236e50c26", // BTC Token
    minAmount: 2,
    maxAmount: 15,
  },

  // –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ –±–æ–ª—å—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ env 
];

const config = {
  rpcUrl: process.env.RPC_URL,
  walletsFile: "wallet.txt",
  progressFile: "progress.json",
  gasLimit: 100000,
  gasPriceMultiplier: 1.2,
  delayBetweenTxs: 2000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–º—Å)
  maxRetries: 5, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ RPC
  retryDelay: 5000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
};

// ABI ERC-20
const erc20Abi = [
  "function balanceOf(address account) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)",
];

// –ß—Ç–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
function readWallets(filePath) {
  const data = fs.readFileSync(filePath, "utf8");
  return data
    .split("\n")
    .map((addr) => addr.trim())
    .filter((addr) => ethers.isAddress(addr));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress(walletIndex, recipientIndex) {
  fs.writeFileSync(
    config.progressFile,
    JSON.stringify({ walletIndex, recipientIndex })
  );
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
  try {
    if (fs.existsSync(config.progressFile)) {
      const data = JSON.parse(fs.readFileSync(config.progressFile, "utf8"));
      return {
        walletIndex: data.walletIndex || 0,
        recipientIndex: data.recipientIndex || -1,
      };
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
  }
  return { walletIndex: 0, recipientIndex: -1 };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã
function getRandomAmount(walletConfig) {
  return (
    Math.floor(
      Math.random() * (walletConfig.maxAmount - walletConfig.minAmount + 1)
    ) + walletConfig.minAmount
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC
async function checkRPCConnection(provider) {
  try {
    await provider.getBlockNumber();
    return true;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC:", err.message);
    return false;
  }
}

// –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
async function reconnectRPC() {
  let retries = 0;
  let provider;

  while (retries < config.maxRetries) {
    try {
      provider = new ethers.JsonRpcProvider(config.rpcUrl);
      const isConnected = await checkRPCConnection(provider);
      if (isConnected) {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        return provider;
      }
    } catch (err) {
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${retries + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC.`);
    }

    retries++;
    if (retries < config.maxRetries) {
      console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${config.retryDelay / 1000} —Å–µ–∫—É–Ω–¥...`);
      await new Promise((resolve) => setTimeout(resolve, config.retryDelay));
    }
  }

  throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC –ø–æ—Å–ª–µ ${config.maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendTokens() {
  const recipients = readWallets(config.walletsFile);
  if (recipients.length === 0) {
    console.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ!");
    return;
  }

  let provider = new ethers.JsonRpcProvider(config.rpcUrl);
  let isConnected = await checkRPCConnection(provider);
  if (!isConnected) {
    provider = await reconnectRPC();
  }

  const { walletIndex: startWalletIndex, recipientIndex: startRecipientIndex } = loadProgress();
  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—à–µ–ª—å–∫–∞ ${startWalletIndex + 1}, –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${startRecipientIndex + 1}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
  for (const walletConfig of walletsConfig) {
    const wallet = new ethers.Wallet(walletConfig.privateKey, provider);
    const tokenContract = new ethers.Contract(walletConfig.tokenAddress, erc20Abi, wallet);
    const balance = await tokenContract.balanceOf(wallet.address);
    const decimals = await tokenContract.decimals();
    const symbol = await tokenContract.symbol();

    console.log(
      `–ö–æ—à–µ–ª—ë–∫ ${wallet.address}: ${ethers.formatUnits(balance, decimals)} ${symbol}`
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏
  let currentRecipientIndex = startRecipientIndex;
  let currentWalletIndex = startWalletIndex;

  while (currentRecipientIndex < recipients.length - 1) {
    currentRecipientIndex++;
    const walletConfig = walletsConfig[currentWalletIndex];
    const recipient = recipients[currentRecipientIndex];

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
      isConnected = await checkRPCConnection(provider);
      if (!isConnected) {
        console.log("‚ö†Ô∏è  RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
        provider = await reconnectRPC();
      }

      const wallet = new ethers.Wallet(walletConfig.privateKey, provider);
      const tokenContract = new ethers.Contract(walletConfig.tokenAddress, erc20Abi, wallet);

      const decimals = await tokenContract.decimals();
      const symbol = await tokenContract.symbol();
      const randomAmount = getRandomAmount(walletConfig);
      const amount = ethers.parseUnits(randomAmount.toString(), decimals);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∞–∑–∞
      const feeData = await provider.getFeeData();
      const gasPrice = feeData.gasPrice;
      const multiplier = BigInt(Math.floor(config.gasPriceMultiplier * 100));
      const adjustedGasPrice = (gasPrice * multiplier) / 100n;

      console.log(
        `[${currentRecipientIndex + 1}/${recipients.length}] –ö–æ—à–µ–ª—ë–∫ ${
          currentWalletIndex + 1
        }/${walletsConfig.length}: –û—Ç–ø—Ä–∞–≤–∫–∞ ${
          walletConfig.minAmount
        }-${walletConfig.maxAmount} ${symbol} –Ω–∞ ${recipient}...`
      );

      const tx = await tokenContract.transfer(recipient, amount, {
        gasLimit: config.gasLimit,
        gasPrice: adjustedGasPrice,
      });

      console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. TX: ${tx.hash}`);
      await tx.wait();
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}`);

      saveProgress(currentWalletIndex, currentRecipientIndex);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ ${recipient}:`, err.message);

      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≥–∞–∑ –∏ —Ç.–¥.)
      if (
        err.message.includes("insufficient funds") ||
        err.message.includes("gas") ||
        err.message.includes("rejected") ||
        err.message.includes("reverted")
      ) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.");
        break;
      }

      // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏ (–ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É)
      if (err.message.includes("network") || err.message.includes("RPC")) {
        console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...");
        currentRecipientIndex--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await new Promise((resolve) => setTimeout(resolve, config.retryDelay));
        continue;
      }

      saveProgress(currentWalletIndex, currentRecipientIndex);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫ (round-robin)
    currentWalletIndex = (currentWalletIndex + 1) % walletsConfig.length;

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    if (currentRecipientIndex < recipients.length - 1) {
      await new Promise((resolve) => setTimeout(resolve, config.delayBetweenTxs));
    }
  }

  console.log("üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

sendTokens().catch(console.error);